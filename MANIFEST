This document contains short descriptions for most source and header files in
the project. The ones that have been left out either aren't used or have an
apropriately named source/header counter-part that has already been described.

src:
byteorder.c        Utilities for converting between host and network byte
                   order.
canbridge.c        A small program that forwards traffic between CAN
                   interfaces over TCP.
canopen.c          Functions to classify CANopen frames based on COB-IDs
canopen-dump.c     A small program that interprets CANopen messages on the
                   bus as simple text messages.
canopen_info.c     Shared memory map with node information.
canopen-vnode.c    Main function for vnode.c.
can-tcp.c          Implementation of canbridge.
conversions.c      Functions to convert object dictionary entries to/from
                   strings.
driver.c           New driver API.
Driver.cpp         Old CANopen master driver code.
DriverManager.cpp  Same as above.
dump.c             Implementation of canopen-dump.
eds.c              Contains functions to read EDS files and access the data
                   quickly after it has been loaded.
hexdump.c          A simple hexdumper.
http.c             HTTP request parser.
ini_parser.c       INI file parser.
legacy-driver.c    A C wrapper around the old C++ driver code.
master.c           The master program.
master-main.c      The main function for the master program.
network.c          Utility functions for networking.
profiling.c        Instrumentation for profiling execution time.
rest.c             REST service.
sdo_async.c        SDO client code. An sdo_async module is a machine that
                   eats CAN frames and spits out fully formed messages.
sdo_common.c       Common SDO client/server utility functions.
sdo-dict.c         Map between indices/subindices, types and dictionary entry
                   names.
sdo_req.c          Request-reply abstraction on top of sdo_async.
sdo-rest.c         SDO REST service (mostly for configuring Lenze Inverters).
sdo_sync.c         Synchronous (blocking) SDO functions.
sdo_srv.c          SDO server code. Used in vnode.
sock.c             A layer to make the rest of the code socket type agnostic.
                   Can be a socketcan socket or a TCP socket.
socketcan.c        SocketCAN utilites.
stream.c           A blocking stdio stream class.
string-utils.c     String manipulation utilities.
strlcpy.c          BSD's strlcpy() (contrib).
types.c            Utilities and definitions that identify and describe
                   CANopen object dictionary types.
vnode.c            Virtual CANopen nodes. This is used for testing and
                   profiling.

inc:
arc.h              Atomic reference counting macros.
CanIOHandlerInterface.h Old CANopen master driver code.
CanMasterInterface.h Same as above.
Driver.h           Same as above.
DriverManager.h    Same as above.
canopen.h          Description of CANopen message types.
co_atomic.h        Compatibility layer for atomic operations.
fff.h              Fake function framework (contrib).
string-utils.h     String manipulation utilities.
time-utils.h       Common time conversion utilities.
tst.h              Minimal unit-testing framework.
vector.h           Dynamic buffers.
type-macros.h      Contains useful macros such as container_of().

inc/canopen:
emcy.h             EMCY message utility functions.
heartbeat.h        Heartbeat message utility functions.
master.h           Shared data in the main program.
nmt.h              NMT message utility functions.
sdo.h              SDO message utility functions.
types.h            Description of CANopen object dictionary types.

inc/sys:
queue.h            BSD linked lists.
tree.h             BSD red-black and splay trees.
